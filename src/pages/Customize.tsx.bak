import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { useAuthStore } from '../store/auth';
import { supabase } from '../lib/supabase';
import { 
  Plus, 
  Trash2, 
  X, 
  Loader2, 
  Settings, 
  FileText, 
  Link2, 
  AlertCircle, 
  CheckCircle,
  Shield,
  Layout,
  Columns,
  Rows,
  Grid,
  Table,
  Image,
  Type,
  ListOrdered,
  Calendar,
  Globe,
  Search,
  Filter,
  Eye,
  Edit,
  Save,
  Copy,
  PanelLeft,
  PanelRight,
  PanelTop,
  PanelBottom,
  Palette,
  ChevronDown,
  ChevronRight,
  Folder,
  FolderOpen
} from 'lucide-react';

interface Message {
  type: 'success' | 'error';
  text: string;
}

interface LayoutComponent {
  id: string;
  type: 'text' | 'image' | 'list' | 'table' | 'calendar' | 'header' | 'divider' | 'button';
  content: string;
  settings: {
    width?: string;
    height?: string;
    alignment?: 'left' | 'center' | 'right';
    color?: string;
    backgroundColor?: string;
    fontSize?: string;
    padding?: string;
    margin?: string;
    borderRadius?: string;
    columns?: number;
    rows?: number;
  };
}

interface PageLayout {
  id: string;
  type: 'single' | 'two-column' | 'three-column' | 'sidebar-left' | 'sidebar-right' | 'header-content' | 'custom-grid';
  components: LayoutComponent[];
  settings: {
    gap?: string;
    padding?: string;
    backgroundColor?: string;
    columnWidths?: string[];
    rowHeights?: string[];
  };
}

interface CustomPage {
  id: string;
  title: string;
  path: string;
  class_id: string | null;
  created_at: string;
  layout: PageLayout | null;
  is_global: boolean;
  description?: string;
  icon?: string;
  status: 'published' | 'draft';
}

interface Class {
  id: string;
  name: string;
  grade: number;
  section: string;
}

export function Customize() {
  const { user } = useAuthStore();
  const [customPages, setCustomPages] = useState<CustomPage[]>([]);
  const [classes, setClasses] = useState<Class[]>([]);
  const [selectedPage, setSelectedPage] = useState<CustomPage | null>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState<Message | null>(null);
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterStatus, setFilterStatus] = useState<'all' | 'published' | 'draft'>('all');
  const [filterClass, setFilterClass] = useState<string>('all');
  
  // New page form state
  const [newPage, setNewPage] = useState({
    title: '',
    path: '',
    description: '',
    class_id: '',
    is_global: false,
    icon: 'FileText',
    status: 'draft' as 'published' | 'draft'
  });
  
  // Layout editor state
  const [activeTab, setActiveTab] = useState<'info' | 'layout' | 'preview'>('info');
  const [selectedLayout, setSelectedLayout] = useState<PageLayout | null>(null);
  const [availableComponents, setAvailableComponents] = useState<{id: string, name: string, icon: React.ReactNode}[]>([]);
  const [draggedComponent, setDraggedComponent] = useState<string | null>(null);
  
  // Refs for drag and drop
  const dropAreaRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    loadCustomPages();
    loadClasses();
    initializeAvailableComponents();
  }, []);

  // Initialize the available components for the layout editor
  const initializeAvailableComponents = () => {
    setAvailableComponents([
      { id: 'text', name: 'Text Block', icon: <Type className="w-5 h-5" /> },
      { id: 'header', name: 'Header', icon: <Type className="w-5 h-5" /> },
      { id: 'image', name: 'Image', icon: <Image className="w-5 h-5" /> },
      { id: 'list', name: 'List', icon: <ListOrdered className="w-5 h-5" /> },
      { id: 'table', name: 'Table', icon: <Table className="w-5 h-5" /> },
      { id: 'calendar', name: 'Calendar', icon: <Calendar className="w-5 h-5" /> },
      { id: 'divider', name: 'Divider', icon: <Rows className="w-5 h-5" /> },
      { id: 'button', name: 'Button', icon: <Link2 className="w-5 h-5" /> }
    ]);
  };

  const loadCustomPages = async () => {
    try {
      setLoading(true);
      // Check if the custom_pages table has the new fields, if not, we need to migrate the data
      const { data: tableInfo, error: tableError } = await supabase
        .from('custom_pages')
        .select('layout, is_global, status')
        .limit(1);

      // If there's an error about missing columns, we need to update the schema
      if (tableError && tableError.message.includes('column')) {
        console.warn('Custom pages table needs migration, attempting to add new columns');
        await migrateCustomPagesTable();
      }

      // Load the custom pages with the new schema
      const { data, error } = await supabase
        .from('custom_pages')
        .select('*')
        .order('title');

      if (error) throw error;
      
      // If the data doesn't have the new fields, add default values
      const normalizedData = (data || []).map(page => ({
        ...page,
        layout: page.layout || null,
        is_global: page.is_global !== undefined ? page.is_global : false,
        status: page.status || 'draft'
      }));
      
      setCustomPages(normalizedData);
    } catch (error) {
      console.error('Error loading custom pages:', error);
      setMessage({ type: 'error', text: 'Failed to load custom pages' });
    } finally {
      setLoading(false);
    }
  };

  // Function to migrate the custom_pages table to the new schema
  const migrateCustomPagesTable = async () => {
    try {
      // Add new columns to the custom_pages table
      // Note: In a real application, you would use a proper migration system
      // This is a simplified approach for demonstration purposes
      await supabase.rpc('add_column_if_not_exists', { 
        table_name: 'custom_pages',
        column_name: 'layout',
        column_type: 'jsonb'
      });
      
      await supabase.rpc('add_column_if_not_exists', { 
        table_name: 'custom_pages',
        column_name: 'is_global',
        column_type: 'boolean'
      });
      
      await supabase.rpc('add_column_if_not_exists', { 
        table_name: 'custom_pages',
        column_name: 'description',
        column_type: 'text'
      });
      
      await supabase.rpc('add_column_if_not_exists', { 
        table_name: 'custom_pages',
        column_name: 'icon',
        column_type: 'text'
      });
      
      await supabase.rpc('add_column_if_not_exists', { 
        table_name: 'custom_pages',
        column_name: 'status',
        column_type: 'text'
      });
      
      console.log('Migration completed successfully');
    } catch (error) {
      console.error('Error migrating custom_pages table:', error);
      // If the RPC function doesn't exist, we can't migrate the table automatically
      // In a real application, you would handle this differently
    }
  };

  const loadClasses = async () => {
    try {
      const { data, error } = await supabase
        .from('classes')
        .select('id, name, grade, section')
        .order('grade', { ascending: true })
        .order('section', { ascending: true });

      if (error) throw error;
      setClasses(data || []);
    } catch (error) {
      console.error('Error loading classes:', error);
      setMessage({ type: 'error', text: 'Failed to load classes' });
    }
  };

  const handleCreatePage = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newPage.title || !newPage.path) return;

    setLoading(true);
    try {
      // Create a default layout for the new page
      const defaultLayout: PageLayout = {
        id: crypto.randomUUID(),
        type: 'single',
        components: [],
        settings: {
          gap: '1rem',
          padding: '1rem',
          backgroundColor: '#ffffff'
        }
      };

      const { data, error } = await supabase
        .from('custom_pages')
        .insert([{
          title: newPage.title,
          path: newPage.path.toLowerCase().replace(/\s+/g, '-'),
          description: newPage.description || '',
          class_id: newPage.is_global ? null : newPage.class_id || null,
          is_global: newPage.is_global,
          icon: newPage.icon || 'FileText',
          status: newPage.status || 'draft',
          layout: defaultLayout
        }])
        .select()
        .single();

      if (error) throw error;

      setCustomPages([...customPages, data]);
      setNewPage({
        title: '',
        path: '',
        description: '',
        class_id: '',
        is_global: false,
        icon: 'FileText',
        status: 'draft'
      });
      setIsCreateModalOpen(false);
      setMessage({ type: 'success', text: 'Page created successfully!' });
      setTimeout(() => setMessage(null), 3000);
    } catch (error: any) {
      console.error('Error creating page:', error);
      setMessage({ type: 'error', text: error.message || 'Failed to create page' });
      setTimeout(() => setMessage(null), 3000);
    } finally {
      setLoading(false);
    }
  };

  const handleDeletePage = async (id: string) => {
    if (!window.confirm('Are you sure you want to delete this page? This action cannot be undone.')) {
      return;
    }

    setLoading(true);
    try {
      const { error } = await supabase
        .from('custom_pages')
        .delete()
        .eq('id', id);

      if (error) throw error;

      setCustomPages(customPages.filter(page => page.id !== id));
      if (selectedPage?.id === id) {
        setSelectedPage(null);
        setSelectedLayout(null);
      }
      setMessage({ type: 'success', text: 'Page deleted successfully!' });
      setTimeout(() => setMessage(null), 3000);
    } catch (error: any) {
      console.error('Error deleting page:', error);
      setMessage({ type: 'error', text: error.message || 'Failed to delete page' });
      setTimeout(() => setMessage(null), 3000);
    } finally {
      setLoading(false);
    }
  };

  const handleSelectPage = (page: CustomPage) => {
    setSelectedPage(page);
    setSelectedLayout(page.layout);
    setActiveTab('info');
    setIsEditing(false);
  };

  const handleUpdatePage = async () => {
    if (!selectedPage) return;

    setLoading(true);
    try {
      const { error } = await supabase
        .from('custom_pages')
        .update({
          title: selectedPage.title,
          path: selectedPage.path,
          description: selectedPage.description || '',
          class_id: selectedPage.is_global ? null : selectedPage.class_id,
          is_global: selectedPage.is_global,
          icon: selectedPage.icon || 'FileText',
          status: selectedPage.status,
          layout: selectedLayout
        })
        .eq('id', selectedPage.id);

      if (error) throw error;

      // Update the page in the local state
      setCustomPages(customPages.map(page => 
        page.id === selectedPage.id ? { ...selectedPage, layout: selectedLayout } : page
      ));
      
      setIsEditing(false);
      setMessage({ type: 'success', text: 'Page updated successfully!' });
      setTimeout(() => setMessage(null), 3000);
    } catch (error: any) {
      console.error('Error updating page:', error);
      setMessage({ type: 'error', text: error.message || 'Failed to update page' });
      setTimeout(() => setMessage(null), 3000);
    } finally {
      setLoading(false);
    }
  };

  // Layout management functions
  const handleAddComponent = (componentType: string) => {
    if (!selectedLayout) return;

    const newComponent: LayoutComponent = {
      id: crypto.randomUUID(),
      type: componentType as any,
      content: '',
      settings: {
        width: '100%',
        alignment: 'left',
        padding: '1rem'
      }
    };

    const updatedLayout = {
      ...selectedLayout,
      components: [...selectedLayout.components, newComponent]
    };

    setSelectedLayout(updatedLayout);
  };

  const handleRemoveComponent = (componentId: string) => {
    if (!selectedLayout) return;

    const updatedLayout = {
      ...selectedLayout,
      components: selectedLayout.components.filter(comp => comp.id !== componentId)
    };

    setSelectedLayout(updatedLayout);
  };

  const handleUpdateComponent = (componentId: string, updates: Partial<LayoutComponent>) => {
    if (!selectedLayout) return;

    const updatedLayout = {
      ...selectedLayout,
      components: selectedLayout.components.map(comp => 
        comp.id === componentId ? { ...comp, ...updates } : comp
      )
    };

    setSelectedLayout(updatedLayout);
  };

  const handleChangeLayoutType = (layoutType: PageLayout['type']) => {
    if (!selectedLayout) return;

    const updatedLayout = {
      ...selectedLayout,
      type: layoutType
    };

    setSelectedLayout(updatedLayout);
  };

  const handleUpdateLayoutSettings = (settings: Partial<PageLayout['settings']>) => {
    if (!selectedLayout) return;

    const updatedLayout = {
      ...selectedLayout,
      settings: {
        ...selectedLayout.settings,
        ...settings
      }
    };

    setSelectedLayout(updatedLayout);
  };

  // Handle drag and drop
  const handleDragStart = (componentId: string) => {
    setDraggedComponent(componentId);
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    if (!draggedComponent || !selectedLayout) return;

    const componentType = draggedComponent;
    handleAddComponent(componentType);
    setDraggedComponent(null);
  };

  // Filter and search functions
  const filteredPages = customPages.filter(page => {
    // Filter by search term
    const matchesSearch = page.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
      page.path.toLowerCase().includes(searchTerm.toLowerCase()) ||
      (page.description || '').toLowerCase().includes(searchTerm.toLowerCase());
    
    // Filter by status
    const matchesStatus = filterStatus === 'all' || page.status === filterStatus;
    
    // Filter by class
    const matchesClass = filterClass === 'all' || 
      page.is_global || 
      page.class_id === filterClass;
    
    return matchesSearch && matchesStatus && matchesClass;
  });

  if (user?.role !== 'ultra_admin' && user?.role !== 'admin') {
    return (
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center"
      >
        <div className="text-center bg-white dark:bg-gray-800 p-8 rounded-2xl shadow-lg">
          <Shield className="w-16 h-16 text-red-500 mx-auto mb-4" />
          <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
            Access Denied
          </h2>
          <p className="text-gray-600 dark:text-gray-300">
            Only administrators can customize the system.
          </p>
        </div>
      </motion.div>
    );
  }

  return (
    <div className="flex h-screen bg-gray-50 dark:bg-gray-900 overflow-hidden">
      {/* Left Panel - Page List */}
      <div className="w-1/4 border-r border-gray-200 dark:border-gray-700 p-4 overflow-y-auto">
        {/* Search and Filter Controls */}
        <div className="mb-4 space-y-3">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
            <input
              type="text"
              placeholder="Search pages..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-10 w-full rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-white p-2"
            />
          </div>
          
          {/* Filters */}
          <div className="flex gap-2">
            <select
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value as any)}
              className="rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-white p-2"
            >
              <option value="all">All Status</option>
              <option value="published">Published</option>
              <option value="draft">Draft</option>
            </select>
            
            <select
              value={filterClass}
              onChange={(e) => setFilterClass(e.target.value)}
              className="rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-white p-2"
            >
              <option value="all">All Classes</option>
              <option value="global">Global Pages</option>
              {classes.map(cls => (
                <option key={cls.id} value={cls.id}>
                  {cls.name || `Grade ${cls.grade} - ${cls.section}`}
                </option>
              ))}
            </select>
          </div>
        </div>
        
        {/* Page List */}
        <div className="space-y-2">
          {filteredPages.map(page => (
            <div
              key={page.id}
              onClick={() => handleSelectPage(page)}
              className={`p-3 rounded-lg cursor-pointer transition-colors ${
                selectedPage?.id === page.id
                  ? 'bg-primary/10 border border-primary/30'
                  : 'hover:bg-gray-100 dark:hover:bg-gray-800 border border-transparent'
              }`}
            >
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <FileText className="text-primary" size={18} />
                  <span className="font-medium text-gray-900 dark:text-white">{page.title}</span>
                </div>
                <span className={`text-xs px-2 py-1 rounded-full ${
                  page.status === 'published' 
                    ? 'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400'
                    : 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-400'
                }`}>
                  {page.status}
                </span>
              </div>
              <div className="text-xs text-gray-500 dark:text-gray-400 mt-1">
                {page.is_global ? 'Global Page' : 'Class: ' + (classes.find(c => c.id === page.class_id)?.name || 'Unknown')}
              </div>
              <div className="flex justify-between items-center mt-2">
                <span className="text-xs text-gray-500 dark:text-gray-400">/{page.path}</span>
                <button
                  onClick={(e) => {
                    e.stopPropagation();
                    handleDeletePage(page.id);
                  }}
                  className="p-1 text-gray-400 hover:text-red-500 dark:hover:text-red-400"
                >
                  <Trash2 size={14} />
                </button>
              </div>
            </div>
          ))}
          
          {filteredPages.length === 0 && (
            <div className="text-center py-8 text-gray-500 dark:text-gray-400">
              No pages found
            </div>
          )}
        </div>
        
        {/* Create Page Button */}
        <button
          onClick={() => setIsCreateModalOpen(true)}
          className="mt-4 w-full flex items-center justify-center gap-2 bg-primary text-white rounded-lg py-2 hover:bg-primary-600 transition-colors"
        >
          <Plus size={18} />
          Create New Page
        </button>
      </div>
      
      {/* Right Panel - Editor */}
      <div className="flex-1 overflow-hidden flex flex-col">
        {selectedPage ? (
          <>
            {/* Editor Header */}
            <div className="border-b border-gray-200 dark:border-gray-700 p-4 flex items-center justify-between">
              <div className="flex items-center gap-3">
                <FileText className="text-primary" size={24} />
                <div>
                  <h2 className="text-xl font-semibold text-gray-900 dark:text-white">{selectedPage.title}</h2>
                  <div className="text-sm text-gray-500 dark:text-gray-400">/{selectedPage.path}</div>
                </div>
              </div>
              
              <div className="flex items-center gap-2">
                {isEditing ? (
                  <>
                    <button
                      onClick={() => setIsEditing(false)}
                      className="px-3 py-1.5 text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg"
                    >
                      Cancel
                    </button>
                    <button
                      onClick={handleUpdatePage}
                      className="px-3 py-1.5 bg-primary text-white rounded-lg hover:bg-primary-600"
                    >
                      Save Changes
                    </button>
                  </>
                ) : (
                  <button
                    onClick={() => setIsEditing(true)}
                    className="px-3 py-1.5 bg-primary text-white rounded-lg hover:bg-primary-600"
                  >
                    Edit Page
                  </button>
                )}
              </div>
            </div>
            
            {/* Editor Tabs */}
            <div className="border-b border-gray-200 dark:border-gray-700 px-4 flex">
              <button
                onClick={() => setActiveTab('info')}
                className={`py-3 px-4 font-medium ${
                  activeTab === 'info'
                    ? 'text-primary border-b-2 border-primary'
                    : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
                }`}
              >
                Page Info
              </button>
              <button
                onClick={() => setActiveTab('layout')}
                className={`py-3 px-4 font-medium ${
                  activeTab === 'layout'
                    ? 'text-primary border-b-2 border-primary'
                    : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
                }`}
              >
                Layout Editor
              </button>
              <button
                onClick={() => setActiveTab('preview')}
                className={`py-3 px-4 font-medium ${
                  activeTab === 'preview'
                    ? 'text-primary border-b-2 border-primary'
                    : 'text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-300'
                }`}
              >
                Preview
              </button>
            </div>
            
            {/* Editor Content */}
            <div className="flex-1 overflow-y-auto p-4">
              {activeTab === 'info' && (
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      Title
                    </label>
                    <input
                      type="text"
                      value={selectedPage.title}
                      onChange={(e) => setSelectedPage({...selectedPage, title: e.target.value})}
                      disabled={!isEditing}
                      className="w-full px-3 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-white disabled:bg-gray-100 dark:disabled:bg-gray-700 disabled:cursor-not-allowed"
                    />
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      Path
                    </label>
                    <div className="flex items-center">
                      <span className="text-gray-500 dark:text-gray-400 mr-1">/custom/</span>
                      <input
                        type="text"
                        value={selectedPage.path}
                        onChange={(e) => setSelectedPage({...selectedPage, path: e.target.value})}
                        disabled={!isEditing}
                        className="flex-1 px-3 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-white disabled:bg-gray-100 dark:disabled:bg-gray-700 disabled:cursor-not-allowed"
                      />
                    </div>
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                      Description
                    </label>
                    <textarea
                      value={selectedPage.description || ''}
                      onChange={(e) => setSelectedPage({...selectedPage, description: e.target.value})}
                      disabled={!isEditing}
                      className="w-full px-3 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-white disabled:bg-gray-100 dark:disabled:bg-gray-700 disabled:cursor-not-allowed h-24"
                    />
                  </div>
                  
                  <div className="flex gap-4">
                    <div className="flex-1">
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        Status
                      </label>
                      <select
                        value={selectedPage.status}
                        onChange={(e) => setSelectedPage({...selectedPage, status: e.target.value as 'published' | 'draft'})}
                        disabled={!isEditing}
                        className="w-full px-3 py-2 rounded-lg border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-800 text-gray-900 dark:text-white disabled:bg-gray-100 dark:disabled:bg-gray-700 disabled:cursor-not-allowed"
                      >
                        <option value="draft">Draft</option>
                        <option value="published">Published</option>
                      </select>
                    </div>
                    
                    <div className="flex-1">
                      <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                        Visibility
                      </label>
                      <div className="flex items-center gap-4 mt-2">
                        <label className="flex items-center gap-2 cursor-pointer">
                          <input
                            type="radio"
                            checked={selectedPage.is_global}
                            onChange={() => setSelectedPage({...selectedPage, is_global: true, class_id: null})}
                            disabled={!isEditing}
                            className="form-radio text-primary focus:ring-primary"
                          />
                          <span className="text-gray-700 dark:text-gray-300">Global</span>
                        </label>
                        <label className="flex items-center gap-2 cursor-pointer">
                          <input
                            type="radio"
                            checked={!selectedPage.is_global}
                            onChange={() => setSelectedPage({...selectedPage, is_global: false})}
                            disabled={!isEditing}
                            className="form-radio text-primary focus:ring-primary"
                          />
                          <span className="text-gray-700 dark:text-gray-300">Class-specific</span>
                        </label>
                      </div>
                    </div>
                  </div>